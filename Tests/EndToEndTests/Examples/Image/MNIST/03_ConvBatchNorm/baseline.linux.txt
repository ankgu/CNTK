CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
08/16/2016 10:50:05: -------------------------------------------------------------------
08/16/2016 10:50:05: Build info: 

08/16/2016 10:50:05: 		Built time: Aug 16 2016 09:41:56
08/16/2016 10:50:05: 		Last modified date: Fri Aug 12 07:32:43 2016
08/16/2016 10:50:05: 		Build type: release
08/16/2016 10:50:05: 		Build target: GPU
08/16/2016 10:50:05: 		With 1bit-SGD: no
08/16/2016 10:50:05: 		Math lib: mkl
08/16/2016 10:50:05: 		CUDA_PATH: /usr/local/cuda-7.5
08/16/2016 10:50:05: 		CUB_PATH: /usr/local/cub-1.4.1
08/16/2016 10:50:05: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/16/2016 10:50:05: 		Build Branch: HEAD
08/16/2016 10:50:05: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 10:50:05: 		Built by philly on f67b30a647de
08/16/2016 10:50:05: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/16/2016 10:50:05: -------------------------------------------------------------------
08/16/2016 10:50:06: -------------------------------------------------------------------
08/16/2016 10:50:06: GPU info:

08/16/2016 10:50:06: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:50:06: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:50:06: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:50:06: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:50:06: -------------------------------------------------------------------

08/16/2016 10:50:06: Running on localhost at 2016/08/16 10:50:06
08/16/2016 10:50:06: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



08/16/2016 10:50:06: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:50:06: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/16/2016 10:50:06: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:50:06: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:50:06: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/16/2016 10:50:06: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:50:06: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

08/16/2016 10:50:06: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 10:50:06: Commands: train test
08/16/2016 10:50:06: Precision = "float"
08/16/2016 10:50:06: CNTKModelPath: /tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
08/16/2016 10:50:06: CNTKCommandTrainInfo: train : 3
08/16/2016 10:50:06: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 10:50:06: ##############################################################################
08/16/2016 10:50:06: #                                                                            #
08/16/2016 10:50:06: # Action "train"                                                             #
08/16/2016 10:50:06: #                                                                            #
08/16/2016 10:50:06: ##############################################################################

08/16/2016 10:50:06: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

08/16/2016 10:50:06: Creating virgin network.
Node 'featScale' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node 'conv1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 25] <- 0.000000.
Node 'conv1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv2.c.W' (LearnableParameter operation): Initializing Parameter[32 x 400] <- 0.000000.
Node 'conv2.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'conv2.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'conv2.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'conv2.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[128 x 1568] <- 0.000000.
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'h1.sc' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'h1.m' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'h1.isd' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'ol.W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- 0.000000.
Node 'ol.b' (LearnableParameter operation): Initializing Parameter[10 x 1] <- 0.000000.
Node 'featScale' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node 'featScale' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node 'featScale' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node 'conv1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 25] <- gaussian(seed=1, range=0.040000*10.000000, onCPU=true).
Node 'conv1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'conv1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv2.c.W' (LearnableParameter operation): Initializing Parameter[32 x 400] <- gaussian(seed=2, range=0.010000*10.000000, onCPU=true).
Node 'conv2.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'conv2.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'conv2.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'conv2.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[128 x 1568] <- gaussian(seed=3, range=0.005051*1.000000, onCPU=true).
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'h1.sc' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 1.000000.
Node 'h1.m' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'h1.isd' (LearnableParameter operation): Initializing Parameter[128 x 1] <- 0.000000.
Node 'ol.W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
Node 'ol.b' (LearnableParameter operation): Initializing Parameter[10 x 1] <- uniform(seed=5, range=0.050000*1.000000, onCPU=true).

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 10:50:07: Created model with 36 nodes on GPU 0.

08/16/2016 10:50:07: Training criterion node(s):
08/16/2016 10:50:07: 	ce = CrossEntropyWithSoftmax

08/16/2016 10:50:07: Evaluation criterion node(s):
08/16/2016 10:50:07: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 61 matrices, 28 are shared as 12, and 33 are not shared.

	{ conv1.c.c.c : [28 x 28 x 16 x *] (gradient)
	  conv1.y : [28 x 28 x 16 x *] }
	{ conv1.c.c.y : [28 x 28 x 16 x *] (gradient)
	  pool1 : [14 x 14 x 16 x *] }
	{ conv1.c.W : [16 x 25] (gradient)
	  conv2.c.c.c : [14 x 14 x 32 x *] }
	{ conv1.c.c.sc : [16 x 1] (gradient)
	  conv1.y : [28 x 28 x 16 x *] (gradient) }
	{ conv1.c.c.b : [16 x 1] (gradient)
	  conv2.c.c.c : [14 x 14 x 32 x *] (gradient)
	  conv2.y : [14 x 14 x 32 x *] }
	{ conv2.c.c.y : [14 x 14 x 32 x *] (gradient)
	  pool2 : [7 x 7 x 32 x *] }
	{ conv2.c.c.sc : [32 x 1] (gradient)
	  conv2.y : [14 x 14 x 32 x *] (gradient)
	  h1.t : [128 x *] }
	{ conv2.c.W : [32 x 400] (gradient)
	  h1.t : [128 x *] (gradient)
	  h1.y : [128 x *] }
	{ h1.bn : [128 x *] (gradient)
	  ol.t : [10 x *] }
	{ ol.W : [10 x 128] (gradient)
	  ol.z : [10 x 1 x *] (gradient) }
	{ ol.t : [10 x *] (gradient)
	  pool1 : [14 x 14 x 16 x *] (gradient)
	  pool2 : [7 x 7 x 32 x *] (gradient) }
	{ h1.sc : [128 x 1] (gradient)
	  h1.y : [128 x *] (gradient) }


08/16/2016 10:50:07: Training 215546 parameters in 11 out of 11 parameter tensors and 25 nodes with gradient:

08/16/2016 10:50:07: 	Node 'conv1.c.W' (LearnableParameter operation) : [16 x 25]
08/16/2016 10:50:07: 	Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 10:50:07: 	Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 10:50:07: 	Node 'conv2.c.W' (LearnableParameter operation) : [32 x 400]
08/16/2016 10:50:07: 	Node 'conv2.c.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 10:50:07: 	Node 'conv2.c.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 10:50:07: 	Node 'h1.W' (LearnableParameter operation) : [128 x 7 x 7 x 32]
08/16/2016 10:50:07: 	Node 'h1.b' (LearnableParameter operation) : [128 x 1]
08/16/2016 10:50:07: 	Node 'h1.sc' (LearnableParameter operation) : [128 x 1]
08/16/2016 10:50:07: 	Node 'ol.W' (LearnableParameter operation) : [10 x 128]
08/16/2016 10:50:07: 	Node 'ol.b' (LearnableParameter operation) : [10 x 1]

08/16/2016 10:50:07: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 10:50:07: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 10:50:07: Starting minibatch loop.
08/16/2016 10:50:09:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.17854112 * 16000; errs = 5.475% * 16000; time = 2.0153s; samplesPerSecond = 7939.3
08/16/2016 10:50:10:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08448637 * 16000; errs = 2.600% * 16000; time = 1.0438s; samplesPerSecond = 15328.0
08/16/2016 10:50:11:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06565906 * 16000; errs = 2.013% * 16000; time = 1.0288s; samplesPerSecond = 15551.8
08/16/2016 10:50:12: Finished Epoch[ 1 of 3]: [Training] ce = 0.09777317 * 60000; errs = 3.020% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=4.87401s
08/16/2016 10:50:12: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

08/16/2016 10:50:12: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

08/16/2016 10:50:12: Starting minibatch loop.
08/16/2016 10:50:13:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02472396 * 16000; errs = 0.831% * 16000; time = 1.0330s; samplesPerSecond = 15489.0
08/16/2016 10:50:14:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01743382 * 16000; errs = 0.500% * 16000; time = 1.0313s; samplesPerSecond = 15514.5
08/16/2016 10:50:15:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.02253625 * 16000; errs = 0.706% * 16000; time = 1.0300s; samplesPerSecond = 15534.0
08/16/2016 10:50:15: Finished Epoch[ 2 of 3]: [Training] ce = 0.02161322 * 60000; errs = 0.687% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=3.87243s
08/16/2016 10:50:15: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

08/16/2016 10:50:15: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

08/16/2016 10:50:15: Starting minibatch loop.
08/16/2016 10:50:16:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01485439 * 16000; errs = 0.419% * 16000; time = 1.0289s; samplesPerSecond = 15551.0
08/16/2016 10:50:18:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01477328 * 16000; errs = 0.419% * 16000; time = 1.0311s; samplesPerSecond = 15517.7
08/16/2016 10:50:19:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01663958 * 16000; errs = 0.519% * 16000; time = 1.0372s; samplesPerSecond = 15426.6
08/16/2016 10:50:19: Finished Epoch[ 3 of 3]: [Training] ce = 0.01594585 * 60000; errs = 0.482% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=3.87525s
08/16/2016 10:50:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
08/16/2016 10:50:19: CNTKCommandTrainEnd: train

08/16/2016 10:50:19: Action "train" complete.


08/16/2016 10:50:19: ##############################################################################
08/16/2016 10:50:19: #                                                                            #
08/16/2016 10:50:19: # Action "test"                                                              #
08/16/2016 10:50:19: #                                                                            #
08/16/2016 10:50:19: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 36 matrices, 0 are shared as 0, and 36 are not shared.


BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/16/2016 10:50:20: Minibatch[1-10]: errs = 0.840% * 10000; ce = 0.02491569 * 10000
08/16/2016 10:50:20: Final Results: Minibatch[1-10]: errs = 0.840% * 10000; ce = 0.02491569 * 10000; perplexity = 1.02522868

08/16/2016 10:50:20: Action "test" complete.

08/16/2016 10:50:20: __COMPLETED__